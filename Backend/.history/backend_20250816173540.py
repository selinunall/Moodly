from flask import Flask, request, jsonify
import google.generativeai as genai

app = Flask(__name__)

# API key ayarÄ±
genai.configure(api_key="AIzaSyC0KTf7YP1u1ScHLIP3pz3TM0Xt9N1GV-g")

# Model seÃ§
model = genai.GenerativeModel("gemini-1.5-flash")

# RAM'de kullanÄ±cÄ± oturumlarÄ±nÄ± saklamak iÃ§in dictionary
user_sessions = {}

prompt="KullanÄ±cÄ±ya psikolojik destek saÄŸlayan bir asistan olarak davranacaksÄ±n. KullanÄ±cÄ±ya nazik ve destekleyici ÅŸekilde cevap ver. DuygularÄ±nÄ±, diyaloglardan analiz et. KullanÄ±cÄ±nÄ±n durumuna gÃ¶re tavsiyelerde bulun. KullanÄ±cÄ±nÄ±n ruh halini iyileÅŸtirmeye Ã§alÄ±ÅŸan bir arkadaÅŸ gibi davran." 

def get_user_chat(user_id):
    """
    KullanÄ±cÄ± iÃ§in chat oturumunu dÃ¶ndÃ¼r.
    Yoksa yeni oluÅŸturur.
    """
    if user_id not in user_sessions:
        chat = model.start_chat(history=[{"parts": [{"text": prompt}]}])
        user_sessions[user_id] = chat
    return user_sessions[user_id]

@app.route("/chat", methods=["POST"])
def chat():
    try:
        data = request.get_json()
        user_id = data.get("user_id")
        user_message = data.get("message", "")

        if not user_id or not user_message:
            return jsonify({"error": "user_id ve message zorunlu"}), 400

        chat_session = get_user_chat(user_id)
        response = chat_session.send_message(user_message)

        return jsonify({"reply": response.text})

    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/", methods=["GET"])
def home():
    return "Backend Ã§alÄ±ÅŸÄ±yor ğŸš€"

if __name__ == "__main__":
    app.run(debug=True, port=5000)
